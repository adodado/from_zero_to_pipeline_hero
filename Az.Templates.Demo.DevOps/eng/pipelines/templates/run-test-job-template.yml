parameters:
  - name: publishCodeCoverage
    type: string
    default: true
  - name: continueOnError
    type: boolean
    default: false
  - name: projectType
    type: string
    default: backend

jobs:
  - job: runTests
    displayName: Run tests
    steps:
        - ${{if eq(parameters.projectType,'backend')}}:
          - task: DotNetCoreCLI@2
            displayName: "Run unit tests"
            continueOnError: ${{parameters.continueOnError}}
            inputs:
                command: "test"
                projects: test/**/*.csproj
                arguments: '--logger "trx" --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura'
                publishTestResults: true
          - ${{if eq(parameters.publishCodeCoverage,'True')}}:
            - task: PublishCodeCoverageResults@1
              displayName: "Publish Code Coverage summary"
              continueOnError: ${{parameters.continueOnError}}
              inputs:
                codeCoverageTool: "Cobertura"
                summaryFileLocation: "$(Agent.TempDirectory)/**/coverage.cobertura.xml"
                failIfCoverageEmpty: false
            - task: CmdLine@2
              inputs:
                script: "dotnet tool install --global dotnet-reportgenerator-globaltool --version 4.5.8"
              displayName: "Install ReportGenerator tool"
              continueOnError: ${{parameters.continueOnError}}
            - script: 'reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Pipeline.Workspace)/CoverageResults -historydir:$(Build.ArtifactStagingDirectory)/test-result-history -reporttypes:"HtmlInline_AzurePipelines;Cobertura;HtmlSummary" -tag:$(Build.BuildNumber) -title:"Code coverage for $(Build.Repository.Name) on $(Build.SourceBranchName)" -verbosity:Verbose'
              displayName: Create Code coverage report
              continueOnError: ${{parameters.continueOnError}}
            - task: PublishBuildArtifacts@1
              displayName: "Publish reportgenerator artifact"
              continueOnError: ${{parameters.continueOnError}}
              inputs:
                PathtoPublish: "$(Pipeline.Workspace)/CoverageResults"
                ArtifactName: coverageResults
        - ${{else}}:  
            - script: |
                npm install -g npm-audit-html
              displayName: "CLI tools install"
            - task: Npm@1
              displayName: "Audit Application"
              continueOnError: ${{parameters.continueOnError}}
              inputs:
                workingDir: $(System.DefaultWorkingDirectory)
                command: custom
                customCommand: "audit --registry=https://registry.npmjs.org/"
            - script: |
                    npm audit --registry=https://registry.npmjs.org/ --json | npm-audit-html --output $(System.DefaultWorkingDirectory)/npm-audit-report/report.html
              displayName: "Generate audit report"
              continueOnError: ${{parameters.continueOnError}}
            - task: PublishPipelineArtifact@1
              continueOnError: ${{parameters.continueOnError}}
              inputs:
                targetPath: "$(System.DefaultWorkingDirectory)/npm-audit-report"
                artifact: "npm-audit-report"
                publishLocation: "pipeline"
            - task: Npm@1
              displayName: "Package install"
              inputs:
                command: 'install'
                workingDir: $(System.DefaultWorkingDirectory)
                verbose: true
            - task: Npm@1
              displayName: "Unit test"
              inputs:
                command: 'custom'
                workingDir: $(System.DefaultWorkingDirectory)
                customCommand: 'test'